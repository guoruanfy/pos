/*
 * POSView.java
 */

package pos;

import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * The application's main frame.
 */
public class POSView extends FrameView {

    public POSView(SingleFrameApplication app) {
        super(app);  
        if(POSUtils.isLogined()){
            showRestUI();
        } else {
           showLoginDialog();
        }
         getFrame().addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we){
                System.exit(0);
            }
         });
    }

    public void showRestUI() {
          initComponents();
          
//        显示操作人员姓名 
        operatorLabel.setText(POSUtils.currentOperator);
//        标注输入框的位置
        recordOrderItemTF.setText(recordTip);
        ordersTable.setColumnSelectionAllowed(false);
//        普通操作人员进入时会隐藏一些页面
        
        if(!POSUtils.isAdmin()) {
//            隐藏菜单栏
            menuBar.setVisible(false);
//            隐藏其它的操作级别
            String[] normalLevels = {"初级"};
            jComboBox1.setModel( new DefaultComboBoxModel(normalLevels));
        } else {
//            初级对应零售，中级对应整售，高级对应批发，特级代表原价
            String[] adminLevels = {"初级","中级","高级"};
            jComboBox1.setModel( new DefaultComboBoxModel(adminLevels));
        }
//        
//         
//        
        ordersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
              public void valueChanged(ListSelectionEvent e)
              {
//                保存选中的记录
                  selectedOrderItem = ordersTable.getSelectedRow();

              }
         });
        
    }
    
    public void showDialog(JDialog dialog) {
        dialog.setLocationRelativeTo(mainFrame);
        POSApp.getApplication().show(dialog);
    }
    
    
    public void showLoginDialog() {
        LoginDialog login = new LoginDialog(mainFrame,true,this );
        showDialog(login);
    }

    
    
    
    
    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            aboutBox = new POSAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        POSApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        operatorLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        recordOrderItemTF = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        cancelBtn = new javax.swing.JButton();
        payByCrashBtn = new javax.swing.JButton();
        showSumPriceTA = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        payByCreditBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(1000, 720));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pos.POSApp.class).getContext().getResourceMap(POSView.class);
        jPanel2.setFont(resourceMap.getFont("jPanel2.font")); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(1000, 45));

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        operatorLabel.setText(resourceMap.getString("operatorLabel.text")); // NOI18N
        operatorLabel.setName("operatorLabel"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("jLabel4.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        recordOrderItemTF.setForeground(resourceMap.getColor("recordOrderItemTF.foreground")); // NOI18N
        recordOrderItemTF.setText(resourceMap.getString("recordOrderItemTF.text")); // NOI18N
        recordOrderItemTF.setName("recordOrderItemTF"); // NOI18N
        recordOrderItemTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                gainRecordFocus(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                loseRecordFocus(evt);
            }
        });
        recordOrderItemTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                recordOrderItem(evt);
            }
        });

        jComboBox1.setFocusable(false);
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                changeCustomerLevel(evt);
            }
        });

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane1.setName("odersTable"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operatorLabel)
                .addGap(145, 145, 145)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(recordOrderItemTF, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(recordOrderItemTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(operatorLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(363, 363, 363))
        );

        jPanel1.setName("ordersMessageZone"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 75));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(pos.POSApp.class).getContext().getActionMap(POSView.class, this);
        cancelBtn.setAction(actionMap.get("cancelOrder")); // NOI18N
        cancelBtn.setFont(resourceMap.getFont("ordersCancel.font")); // NOI18N
        cancelBtn.setText(resourceMap.getString("ordersCancel.text")); // NOI18N
        cancelBtn.setFocusable(false);
        cancelBtn.setName("ordersCancel"); // NOI18N

        payByCrashBtn.setAction(actionMap.get("payByCash")); // NOI18N
        payByCrashBtn.setFont(resourceMap.getFont("ordersCrash.font")); // NOI18N
        payByCrashBtn.setText(resourceMap.getString("ordersCrash.text")); // NOI18N
        payByCrashBtn.setName("ordersCrash"); // NOI18N

        showSumPriceTA.setFont(resourceMap.getFont("showSumPriceTA.font")); // NOI18N
        showSumPriceTA.setText(resourceMap.getString("showSumPriceTA.text")); // NOI18N
        showSumPriceTA.setName("showSumPriceTA"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        payByCreditBtn1.setAction(actionMap.get("showUpdateOrderItemDialog")); // NOI18N
        payByCreditBtn1.setFont(resourceMap.getFont("payByCreditBtn1.font")); // NOI18N
        payByCreditBtn1.setText(resourceMap.getString("payByCreditBtn1.text")); // NOI18N
        payByCreditBtn1.setActionCommand(resourceMap.getString("payByCreditBtn1.actionCommand")); // NOI18N
        payByCreditBtn1.setFocusable(false);
        payByCreditBtn1.setName("payByCreditBtn1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showSumPriceTA, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(payByCreditBtn1)
                .addGap(18, 18, 18)
                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(payByCrashBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payByCrashBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payByCreditBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(showSumPriceTA))
                        .addGap(19, 19, 19))))
        );

        jScrollPane2.setFont(resourceMap.getFont("jScrollPane2.font")); // NOI18N
        jScrollPane2.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane2.setName("jScrollPane2"); // NOI18N
        jScrollPane2.setOpaque(false);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(1000, 600));

        ordersTable.setBackground(resourceMap.getColor("ordersTable.background")); // NOI18N
        ordersTable.setFont(resourceMap.getFont("ordersTable.font")); // NOI18N
        ordersTable.setForeground(resourceMap.getColor("ordersTable.foreground")); // NOI18N
        ordersTable.setModel(ordersTableModel);
        ordersTable.setFocusable(false);
        ordersTable.setGridColor(resourceMap.getColor("ordersTable.gridColor")); // NOI18N
        ordersTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        ordersTable.setName("ordersTable"); // NOI18N
        ordersTable.setPreferredSize(new java.awt.Dimension(1000, 520));
        ordersTable.setRowHeight(25);
        ordersTable.setSelectionBackground(resourceMap.getColor("ordersTable.selectionBackground")); // NOI18N
        ordersTable.setSelectionForeground(resourceMap.getColor("ordersTable.selectionForeground")); // NOI18N
        ordersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ordersTable.getTableHeader().setResizingAllowed(false);
        ordersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(ordersTable);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1051, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setMargin(new java.awt.Insets(2, 2, 4, 2));
        fileMenu.setName("fileMenu"); // NOI18N

        jMenuItem2.setAction(actionMap.get("showRecordProductDialog")); // NOI18N
        jMenuItem2.setFont(resourceMap.getFont("jMenuItem1.font")); // NOI18N
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        fileMenu.add(jMenuItem2);

        jMenuItem4.setAction(actionMap.get("showInventoryDialog")); // NOI18N
        jMenuItem4.setFont(resourceMap.getFont("jMenuItem1.font")); // NOI18N
        jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
        jMenuItem4.setName("jMenuItem4"); // NOI18N
        fileMenu.add(jMenuItem4);

        jMenuItem3.setAction(actionMap.get("showSearchProductDialog")); // NOI18N
        jMenuItem3.setFont(resourceMap.getFont("jMenuItem1.font")); // NOI18N
        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        fileMenu.add(jMenuItem3);

        jMenuItem1.setAction(actionMap.get("showOperatorAdminDialog")); // NOI18N
        jMenuItem1.setFont(resourceMap.getFont("jMenuItem1.font")); // NOI18N
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        fileMenu.add(jMenuItem1);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setFont(resourceMap.getFont("exitMenuItem.font")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setFont(resourceMap.getFont("aboutMenuItem.font")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

//    记录商品的输入框
private void recordOrderItem(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_recordOrderItem
    if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
        addOrderItemToTableModel(recordOrderItemTF.getText());
        recordOrderItemTF.setText("");
    }
    
}//GEN-LAST:event_recordOrderItem
// 改变用户的级别 （用户级别改变后相应购买项也要重新计算）
private void changeCustomerLevel(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_changeCustomerLevel
    String levelStr = evt.getItem().toString();
    Product.level = POSUtils.productLevelStrToInt(levelStr);
    updateALLOrderItemsPrice();
    reCaculateTotalCrash();
    
}//GEN-LAST:event_changeCustomerLevel

// 商品输入框获取焦点时
private void gainRecordFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gainRecordFocus
// TODO add your handling code here:
    recordOrderItemTF.setText("");
}//GEN-LAST:event_gainRecordFocus

//商品输入框失去焦点时
private void loseRecordFocus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_loseRecordFocus
// TODO add your handling code here:
    recordOrderItemTF.setText(recordTip);
}//GEN-LAST:event_loseRecordFocus


private void addOrderItemToTableModel(String code){
    Product product = db.queryProductByCode(code);
    
    if(product != null) {
//        计算总的价格
       totalCash += product.getDiscountPrice();
        
       Integer indexObject = code2index.get(code);
       if(indexObject != null) {
           int index = indexObject.intValue();
           updateOrderItemNo(index);
       } else {
            code2index.put(code, new Integer(ordersTableModel.getRowCount()));
            double price = product.getDiscountPrice(Product.LOW_LEVEL);
            Object[] row = {product.getCode(),product.getName(),price ,product.getDiscountPrice() ,1 ,
                POSUtils.productSaleTypeIntToStr(Product.LOW_LEVEL),price };
            ordersTableModel.addRow(row);
       }   
//       触发金额的显示
        showSumPriceTA.setText(POSUtils.formatCash(totalCash)); 
       
    }
}

// 修改交易条目调用的函数 某记录单独按照某一个价格
    public void updateOrderItem(double discountPrice,int saleType,double count) {
        String code = getCodeFromTableModel(this.selectedOrderItem);
        double finalPrice = 0; 
        if(discountPrice == 0){
            finalPrice = db.queryProductByCode(code).getDiscountPrice(saleType);
        } else {
            finalPrice = discountPrice;
        }

        setItemDiscountPriceToTableModel(this.selectedOrderItem,finalPrice);
        setItemNoToTableModel(this.selectedOrderItem, count);
        setSaleTypeToTableModel(this.selectedOrderItem, saleType);
        setTotalPriceToTableModel(this.selectedOrderItem, count*finalPrice);
        
        reCaculateTotalCrash();
        
    }
    
    
    private void reCaculateTotalCrash() {
        int length = getTabelModelRowCount();
        double sum = 0.0;
        for(int i = 0; i< length; i++) {
           sum += getTotalPriceFromTableModel(i);
        }
        showSumPriceTA.setText(POSUtils.formatCash(sum)); 
    }
    
    private void  updateALLOrderItemsPrice() {
        int length = getTabelModelRowCount();
        for(int i = 0; i< length; i++) {
            updateOrderItemDiscountPrice(i);
        }
    }

    private void updateOrderItemNo(int index) {
       double oldNo = getItemNoFromTableModel(index);
       double newNo = oldNo + 1;

       double price = getDiscountPriceFromTableModel(index);

       setItemNoToTableModel(index, newNo);
       setTotalPriceToTableModel(index, newNo*price);
    }
    
//    修改操作级别时调用的函数 所有记录都按照某一价格
    private void updateOrderItemDiscountPrice(int index) {
       String code =  getCodeFromTableModel(index);
   
       double discountPrice = db.queryProductByCode(code).getDiscountPrice();
       setItemDiscountPriceToTableModel(index,discountPrice);
       
       double no = getItemNoFromTableModel(index);
       setTotalPriceToTableModel(index, discountPrice*no);

    }

//    对ordersTableModel的设置和读取操作
    private String getCodeFromTableModel(int index) {
        return ordersTableModel.getValueAt(index, 0).toString();
    }
    
    private String getNameFromTableModel(int index) {
        return ordersTableModel.getValueAt(index, 1).toString();
    }
    
    private double getPriceFromTableModel(int index) {
        return Double.parseDouble(ordersTableModel.getValueAt(index,2).toString());
    }
    
    private double getDiscountPriceFromTableModel(int index) {
        return Double.parseDouble(ordersTableModel.getValueAt(index,3).toString());
    }
    
    private double getItemNoFromTableModel(int index) {
        return Double.parseDouble(ordersTableModel.getValueAt(index,4).toString());
    }
    
    private int getSaleTypeFromTableModel(int index) {
        return  POSUtils.productSaleTypeStrToInt(ordersTableModel.getValueAt(index,5).toString());
    }
    
    private double getTotalPriceFromTableModel(int index) {
        return Double.parseDouble(ordersTableModel.getValueAt(index,6).toString());
    }
    
    private int getTabelModelRowCount() {
        return ordersTableModel.getRowCount();
    }
    

    
    private void setItemDiscountPriceToTableModel(int index, double discountPrice) {
         ordersTableModel.setValueAt(discountPrice, index, 3);
    }
    
    private void setItemNoToTableModel(int index, double newNo) {
        ordersTableModel.setValueAt(newNo, index, 4);
    }
    
    private void setSaleTypeToTableModel(int index, int type) {
        ordersTableModel.setValueAt(POSUtils.productSaleTypeIntToStr(type), index, 5);
    }
    
    private void setTotalPriceToTableModel(int index, double totalPrice) {
        ordersTableModel.setValueAt(totalPrice, index, 6);
    }
    

    
    private List<OrderItem> transfertFromTableModel(String no) {
        int length = getTabelModelRowCount();
        List<OrderItem> orderItems = new ArrayList<OrderItem>(length);
        for(int i = 0; i<length; i++) {
            OrderItem orderItem = new OrderItem();
            orderItem.setCode(getCodeFromTableModel(i));
            orderItem.setName(getNameFromTableModel(i));
            orderItem.setPrice(getPriceFromTableModel(i));
            orderItem.setActualPrice(getDiscountPriceFromTableModel(i));
            orderItem.setCount(getItemNoFromTableModel(i));
            orderItem.setTotal(getTotalPriceFromTableModel(i));
            orderItem.setSaleType(getSaleTypeFromTableModel(i));
            orderItem.setNo(no);
            
            orderItems.add(orderItem);
        }
        return orderItems;
    }
    
//   保存当前的订单项
    public  void saveCurrentOrderItems(String no){
        
        List<OrderItem> orderitems = transfertFromTableModel(no);
        for(OrderItem item : orderitems) {
            db.saveItem(item);
            db.addSaleNoByOrderItem(item);
        }
        
    }
    
    public void clearTableModel() {
        int length = getTabelModelRowCount();
        for(int i = 0;i < length; i++) {
            ordersTableModel.removeRow(0);
        }
    }
    
    public void reset() {
        clearTableModel();
        code2index.clear();
        totalCash = 0.0;
        showSumPriceTA.setText("0.0");
//       恢复操作级别
        jComboBox1.setSelectedIndex(0);
//        恢复选中的记录
        selectedOrderItem = -1;
        recordOrderItemTF.requestFocus();
    }
      

    
    
//    赊账
    @Action
    public void playByCredit() {
//       showSumPriceTA.setText("test"); 
    }

//    取消
    @Action
    public void cancelOrder() {
        if( getTabelModelRowCount() > 0) {
             reset();
        } else {
             POSUtils.showTips("目前还没有交易！");
        }
    }

//    结账
    @Action
    public void payByCash() {
        if( getTabelModelRowCount() > 0) {
            JDialog payByCash = new PayByCashDialog(mainFrame,true,this,totalCash );
            showDialog(payByCash);
        } else {
            POSUtils.showTips("目前还没有交易！");
        }

    }

//    修改订单条目
    @Action
    public void showUpdateOrderItemDialog() {
           if(getTabelModelRowCount() > 0) {
                if(selectedOrderItem >= 0 && selectedOrderItem < getTabelModelRowCount()) {
                     JDialog updateOrderItemDialog = new UpdateOrderItemDialog(mainFrame,true,this,
                            getSaleTypeFromTableModel(selectedOrderItem),
                            getItemNoFromTableModel(selectedOrderItem));
                     showDialog(updateOrderItemDialog);
                } else {
                    POSUtils.showTips("请选择要修改的交易明细！");
                }
            } else {
                POSUtils.showTips("目前还没有交易！");
            }

    }

//    显示操作人员管理界面
    @Action
    public void showOperatorAdminDialog() {
        JDialog operatorAdminDialog = new OperatorAdminDialog(mainFrame,true);
        showDialog(operatorAdminDialog);
    }
//    显示入库商品的界面
    @Action
    public void showRecordProductDialog() {
        JDialog recordProductDialog = new RecordProductDialog(mainFrame,true);
        showDialog(recordProductDialog);
    }

    //    显示商品信息查询界面
    @Action
    public void showSearchProductDialog() {
        JDialog searchProductDialog = new SearchProductDialog(mainFrame,true);
        showDialog(searchProductDialog);
    }
    
//   显示盘点交易页面
    @Action
    public void showInventoryDialog() {
        JDialog inventoryDialog = new InventoryDialog(mainFrame,true);
        showDialog(inventoryDialog);
    }
    
    
    private DB db = new DB();
    private String[] columnNames= {"条形码","商品名称","单价","会员价","数量","出售类型","小计"};
    private Object[][] rowData = {};
    private DefaultTableModel ordersTableModel = new DefaultTableModel(rowData, columnNames){
        @Override
        public boolean isCellEditable(int row, int column) { 
            return false; 
        }
       
    };
//    TableModel中每个code 和 每个Object[]的对应关系。
    private HashMap<String,Integer> code2index = new HashMap<String,Integer>();
    private double totalCash = 0.0;
    private final String recordTip = "请将光标定位在这里开始交易！";
    private JFrame mainFrame = POSApp.getApplication().getMainFrame();
//    保存当前选中的交易记录
    private int selectedOrderItem = -1;
    
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel operatorLabel;
    private javax.swing.JTable ordersTable;
    private javax.swing.JButton payByCrashBtn;
    private javax.swing.JButton payByCreditBtn1;
    private javax.swing.JTextField recordOrderItemTF;
    private javax.swing.JLabel showSumPriceTA;
    // End of variables declaration//GEN-END:variables


    private JDialog aboutBox;
}
